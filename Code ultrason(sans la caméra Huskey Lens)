#include <Servo.h>

Servo servo;

const int trigPin = A1;
const int echoPin = A0;

// Variables for distance measurement
long duration;
int distance;
int previousDistance = 0;
const int threshold = 5;  // Threshold for movement detection
unsigned long movementDetectedTime = 0; // Time when movement is detected
bool motorActive = false; // Indicates if the motor is currently active
bool motorReverse = false;
bool motorPause = false;

void setup() 
{
  servo.attach(A3);
  servo.write(90);  // Initially stop the servo
  delay(2000);

  // Set the trigPin as an output and echoPin as an input
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  // Start serial communication
  Serial.begin(9600); 
}

void loop() 
{
  // Clear the trigPin
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);

  // Set the trigPin on HIGH state for 10 microseconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  // Read the echoPin and return the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);

  // Calculate the distance
  distance = duration * 0.034 / 2;

  // Print the distance on the Serial Monitor
  Serial.print("Distance: ");
  Serial.println(distance);

  // Detect movement by comparing successive distances
  if (abs(distance - previousDistance) > threshold) 
  {
    // Movement detected
    motorActive = true;
    movementDetectedTime = millis(); // Record the time of detection
    servo.write(135);  // Activate the servo (adjust this value if necessary)
  } 

  // Check if the motor should be stopped after 3 seconds
  if (motorActive && millis() - movementDetectedTime >= 3000) 
  { 
    motorActive = false;
    motorPause = true;
    movementDetectedTime = millis();
    servo.write(90);
  }
  
  if (!motorActive && motorPause &&!motorReverse && millis() - movementDetectedTime >= 3000) 
  {
    motorReverse = true;
    motorPause = false;
    movementDetectedTime = millis();
    servo.write(45);
  } 
  
  if (motorReverse && millis() - movementDetectedTime >= 3000) 
  {
    motorReverse = false; // Réinitialiser le mode inverse
    servo.write(90);   // Ramener le servo à la position initiale
  }
  
  // Update the previous distance
  previousDistance = distance;

  // Short delay to avoid overloading the sensor
  delay(1000);
}
